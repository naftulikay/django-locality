#django-locality#

`django-locality` is a pretty simple library geared at making things easy when it comes to countries and territories. It comes with a bunch of nice initial data, so you'll be able to immediately get up to speed tying objects to countries and territories.

For example, you can list all countries like so:

    locality.models.Country.objects.all()

You can also find all territories by country like so:

	for country in locality.models.Country.objects.all():
		country.territories

You can create your own models around countries and territories:

    class Address(models.Model):
        country = models.ForeignKey('locality.models.Country')
		territory = models.ForeignKey('locality.models.Territory')

Eventually, this Django module will include nice little helpers like template tags, but for now, it simply makes it easy for you to work with countries and territories.

There are some nice views included for getting values in serialized form, as well as some nifty form fields and widgets. Some url patterns are supplied to demonstrate serialization using the views. 

It's ridiculously simple, yet somehow doesn't exist in the Django-sphere. Please report all bugs to the Git Issue-Tracker, and enjoy the library :)

MySQL Issues
------------

You will have issues loading fixture data with MySQL if your database's
default character set is not utf8.  You can check your tables' charsets
by running:

	SHOW FULL COLUMNS tablename;

You can alter the charsets via:

	ALTER TABLE tablename CONVERT TO CHARACTER SET utf8;

To do this for `django-locality`, you can first sync the database,
alter the character set for the resulting tables, and then load the
fixtures.
